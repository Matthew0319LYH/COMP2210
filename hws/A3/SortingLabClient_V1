/**
 * SortingLabClient.java. 
 * Provides a simple example client of SortingLab.java.
 *
 * NOTE: The generic type of SortingLab must be bound
 *       to a Comparable type. The sorting methods in
 *       SortingLab use the natural ordering of the
 *       elements in the parameter array.
 *
 * @author    Dean Hendrix (dh@auburn.edu)
 * @version   2015-09-11
 *
 */
import java.util.Arrays; 
 
public final class SortingLabClient {

  /** Drives execution. */
   public static void main(String[] args) {
      int key = 46;
      // run one sort on an array of Strings
      /*String[] as = {"D", "B", "E", "C", "A"};
      SortingLab<String> sls = new SortingLab<String>(key);
      sls.sort1(as); */
   
      // run a sort on multiple Integer arrays of increasing length
      SortingLab<Integer> sli = new SortingLab<Integer>(key);
      int M = 500000; //2000000; // max capacity for array
      int N = 1000;   //10000;   // initial size of array
      double[][] start = new double[16][5];
      double[][] elapsedTime = new double[16][5];
      double[][] R = new double[16][5];
      double[][] k = new double[16][5];
      
      //for (; N < M; N *= 2) {
      for (int i = 0; i < 16; i++) {
         Integer[] ai = getIntegerArray(N, Integer.MAX_VALUE);
         Arrays.sort(ai);
         System.out.println("========sort1 method:========================================");
         Integer[] aiCp = Arrays.copyOf(ai, ai.length);
         start[i][0] = System.nanoTime();
         sli.sort1(aiCp);
         elapsedTime[i][0] = (System.nanoTime() - start[i][0]) / 1000000000d;
         System.out.print(N + "\t");
         System.out.printf("%4.3f\t", elapsedTime[i][0]);
         if (i >= 1) {
            R[i][0] = elapsedTime[i][0] / elapsedTime[i - 1][0];
            k[i][0] = Math.log(R[i][0]) / Math.log(2);
            System.out.printf("%4.3f\t", R[i][0]);
            System.out.printf("%4.3f\t", k[i][0]);
         }
         System.out.println("\n========sort2 method:========================================");
         aiCp = Arrays.copyOf(ai, ai.length);
         //Integer[] ai = getIntegerArray(N, Integer.MAX_VALUE);
         start[i][1] = System.nanoTime();
         sli.sort2(aiCp);
         elapsedTime[i][1] = (System.nanoTime() - start[i][1]) / 1000000000d;
         System.out.print(N + "\t");
         System.out.printf("%4.3f\t", elapsedTime[i][1]);
         if (i >= 1) {
            R[i][1] = elapsedTime[i][1] / elapsedTime[i - 1][1];
            k[i][1] = Math.log(R[i][1]) / Math.log(2);
            System.out.printf("%4.3f\t", R[i][1]);
            System.out.printf("%4.3f\t", k[i][1]);
         }         
         System.out.println("\n========sort3 method:========================================");
         aiCp = Arrays.copyOf(ai, ai.length);
         //Integer[] ai = getIntegerArray(N, Integer.MAX_VALUE);
         start[i][2] = System.nanoTime();
         sli.sort3(aiCp);
         elapsedTime[i][2] = (System.nanoTime() - start[i][2]) / 1000000000d;
         System.out.print(N + "\t");
         System.out.printf("%4.3f\t", elapsedTime[i][2]);
         if (i >= 1) {
            R[i][2] = elapsedTime[i][2] / elapsedTime[i - 1][2];
            k[i][2] = Math.log(R[i][2]) / Math.log(2);
            System.out.printf("%4.3f\t", R[i][2]);
            System.out.printf("%4.3f\t", k[i][2]);
         }
         System.out.println("\n========sort4 method:========================================");
         aiCp = Arrays.copyOf(ai, ai.length);
         //Integer[] ai = getIntegerArray(N, Integer.MAX_VALUE);
         start[i][3] = System.nanoTime();
         sli.sort4(aiCp);
         elapsedTime[i][3] = (System.nanoTime() - start[i][3]) / 1000000000d;
         System.out.print(N + "\t");
         System.out.printf("%4.3f\t", elapsedTime[i][3]);
         if (i >= 1) {
            R[i][3] = elapsedTime[i][3] / elapsedTime[i - 1][3];
            k[i][3] = Math.log(R[i][0]) / Math.log(2);
            System.out.printf("%4.3f\t", R[i][3]);
            System.out.printf("%4.3f\t", k[i][3]);
         }         
         System.out.println("\n========sort5 method:========================================");
         aiCp = Arrays.copyOf(ai, ai.length);
         //Integer[] ai = getIntegerArray(N, Integer.MAX_VALUE);
         start[i][4] = System.nanoTime();
         sli.sort5(aiCp);
         elapsedTime[i][4] = (System.nanoTime() - start[i][4]) / 1000000000d;
         System.out.print(N + "\t");
         System.out.printf("%4.3f\t", elapsedTime[i][4]);
         if (i >= 1) {
            R[i][4] = elapsedTime[i][4] / elapsedTime[i - 1][4];
            k[i][4] = Math.log(R[i][4]) / Math.log(2);
            System.out.printf("%4.3f\t", R[i][4]);
            System.out.printf("%4.3f\t", k[i][4]);
         }         
         
         
         System.out.println("\n================================================");
         N *= 2;
      }
   }

  /** 
   * Returns an array of size N filled with Integer values
   * in the range 0 .. max - 1.
   */
   private static Integer[] getIntegerArray(int N, int max) {
      Integer[] a = new Integer[N];
      java.util.Random rng = new java.util.Random();
      for (int i = 0; i < N; i++) {
         a[i] = rng.nextInt(max);
      }
      Arrays.sort(a);
      return a;
      
   }

}
